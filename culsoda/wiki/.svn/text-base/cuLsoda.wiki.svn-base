#summary Compilation instructions.
= cuLsoda =
***EDIT***
This repository is now deprecated.  Please reference the new repository at GitHub: https://github.com/Celemourn/cuLsoda
***EDIT***



This code is built using CUDA 2.3 on linux (The mac version of 2.3 currently has a bug that prevents the code from compiling), and is in double precision, requiring compute capability 1.3 or better.  to build the project, download all four files to the same directory, and use 'nvcc main.cu -arch=sm_13 -o test.exe' for the device, or add the -deviceemu tag to compile for emulation.  There is currently a bug that causes output to differ between emulation and device mode (emulation mode output is known to be correct).  Also, the code needs a lot of cleaning up, including revision of the comments, rewriting of most of the routines to eliminate goto statements (sorry, I had no choice, I swear!), and generally refine the code to make it not cause migraines instantly upon viewing it for the first time.

UPDATE:  The inaccurate results on the device are caused by compiler optimizations.  In order to correct this, you have to add '-Xopencc -O0' to the build command.  This turns off the optimizations of the nvopencc compiler, and lets the routine put out correct numbers.  The code is slowed down a bit, but fast isn't any good when the numbers are wrong, neh?

Also, we now have some benchmark results comparing cos(n)/n being solved from 0 to 10,000.  On the CPU cuLsoda (the guts of it anyway) is called iteratively, for n = 1 to 1024.  On the GPU n threads are created, for n = 1 to 1024.  The CPU completion times are, as we should expect, almost perfectly linear.  The GPU results are more interesting though.  I'm running another batch to take the GPU from 1025 to 2048, and I'll post all the results, along with the benchmark code and scripts, in a few days (or weeks? hope not).

--Trax